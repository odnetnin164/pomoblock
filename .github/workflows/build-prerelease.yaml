name: Build and Create Prerelease

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Bump patch version in manifest.json
        id: bump
        run: |
          VERSION=$(jq -r '.version' manifest.json)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          jq --arg v "$NEW_VERSION" '.version = $v' manifest.json > tmp && mv tmp manifest.json
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version to $NEW_VERSION"

      - name: Update package.json version
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          if [ -f "package.json" ]; then
            echo "Updating package.json version to $NEW_VERSION"
            jq --arg v "$NEW_VERSION" '.version = $v' package.json > tmp && mv tmp package.json
            echo "‚úÖ Updated package.json version"
          else
            echo "‚ö†Ô∏è package.json not found, skipping"
          fi

      - name: Update other version references
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Updating version references to $NEW_VERSION"
          
          # Update README.md if it has version badges or references
          if [ -f "README.md" ]; then
            # Update any version badges (common patterns)
            sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$NEW_VERSION/g" README.md || true
            sed -i "s/Version [0-9]\+\.[0-9]\+\.[0-9]\+/Version $NEW_VERSION/g" README.md || true
            echo "‚úÖ Updated README.md version references"
          fi
          
          # Update any other files that might contain version references
          # Add more patterns here as needed
          
          echo "‚úÖ Version references updated to $NEW_VERSION"

      - name: Generate changelog from commits
        id: changelog
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üìã Generating changelog for v$NEW_VERSION"
          
          # Get the previous tag/version for comparison
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "üÜï This appears to be the first release"
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            CHANGELOG_TITLE="## üÜï Initial Release Changes"
          else
            echo "üìä Comparing with previous version: $PREVIOUS_TAG"
            CHANGELOG_TITLE="## üìã Changes Since $PREVIOUS_TAG"
          fi
          
          # Generate commit log with nice formatting
          echo "Generating commit history..."
          
          # Get commits since last tag, excluding merge commits
          COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --oneline --no-merges --reverse --pretty=format:"- %s (%h)" || echo "")
          
          if [ -z "$COMMITS" ]; then
            COMMITS="- Initial release or no new commits"
          fi
          
          # Categorize commits if they follow conventional commit format
          FEATURES=$(echo "$COMMITS" | grep -E "^- (feat|feature)" || echo "")
          FIXES=$(echo "$COMMITS" | grep -E "^- (fix|bugfix)" || echo "")
          DOCS=$(echo "$COMMITS" | grep -E "^- (docs|doc)" || echo "")
          STYLES=$(echo "$COMMITS" | grep -E "^- (style|ui|css)" || echo "")
          REFACTOR=$(echo "$COMMITS" | grep -E "^- (refactor|refac)" || echo "")
          CHORES=$(echo "$COMMITS" | grep -E "^- (chore|ci|build)" || echo "")
          OTHERS=$(echo "$COMMITS" | grep -vE "^- (feat|feature|fix|bugfix|docs|doc|style|ui|css|refactor|refac|chore|ci|build)" || echo "")
          
          # Build formatted changelog
          FORMATTED_CHANGELOG="$CHANGELOG_TITLE"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'
          
          if [ ! -z "$FEATURES" ]; then
            FORMATTED_CHANGELOG+="### ‚ú® New Features"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'"$FEATURES"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'
          fi
          
          if [ ! -z "$FIXES" ]; then
            FORMATTED_CHANGELOG+="### üêõ Bug Fixes"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'"$FIXES"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'
          fi
          
          if [ ! -z "$STYLES" ]; then
            FORMATTED_CHANGELOG+="### üé® UI/Style Changes"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'"$STYLES"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'
          fi
          
          if [ ! -z "$REFACTOR" ]; then
            FORMATTED_CHANGELOG+="### ‚ôªÔ∏è Code Improvements"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'"$REFACTOR"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'
          fi
          
          if [ ! -z "$DOCS" ]; then
            FORMATTED_CHANGELOG+="### üìö Documentation"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'"$DOCS"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'
          fi
          
          if [ ! -z "$CHORES" ]; then
            FORMATTED_CHANGELOG+="### üîß Maintenance"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'"$CHORES"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'
          fi
          
          if [ ! -z "$OTHERS" ]; then
            FORMATTED_CHANGELOG+="### üîÑ Other Changes"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'"$OTHERS"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'
          fi
          
          # If no categorized commits, just show all commits
          if [ -z "$FEATURES" ] && [ -z "$FIXES" ] && [ -z "$STYLES" ] && [ -z "$REFACTOR" ] && [ -z "$DOCS" ] && [ -z "$CHORES" ] && [ -z "$OTHERS" ]; then
            FORMATTED_CHANGELOG+="### üìù All Changes"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'"$COMMITS"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'
          fi
          
          # Add commit count and comparison link
          COMMIT_COUNT=$(echo "$COMMITS" | wc -l)
          if [ "$COMMIT_COUNT" -gt 0 ]; then
            FORMATTED_CHANGELOG+="**üìä Total commits**: $COMMIT_COUNT"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'
            if [ ! -z "$PREVIOUS_TAG" ] && [ "$PREVIOUS_TAG" != "$(git rev-list --max-parents=0 HEAD)" ]; then
              FORMATTED_CHANGELOG+="**üîó Full diff**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...v$NEW_VERSION"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"\n'
            fi
          fi
          
          # Save to file and output variable (handling multiline content)
          echo "$FORMATTED_CHANGELOG" > changelog.md
          echo "changelog_file=changelog.md" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Generated changelog with $COMMIT_COUNT commits"
          echo ""
          echo "üìã Changelog preview:"
          echo "----------------------------------------"
          cat changelog.md
          echo "----------------------------------------"

      - name: Build extension
        run: |
          echo "üèóÔ∏è Building extension with version ${{ steps.bump.outputs.new_version }}"
          npm run build
          echo "‚úÖ Build completed"

      - name: Verify build output
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "Built manifest.json version:"
          BUILT_VERSION=$(cat dist/manifest.json | jq -r '.version')
          EXPECTED_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "Expected: $EXPECTED_VERSION"
          echo "Built: $BUILT_VERSION"
          
          if [ "$BUILT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Built version ($BUILT_VERSION) doesn't match expected ($EXPECTED_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version verification passed"

      - name: Create ZIP package
        run: |
          cd dist
          zip -r "../pomoblock-${{ steps.bump.outputs.new_version }}.zip" .
          cd ..
          echo "Created package: pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          ls -la *.zip

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check what files have been modified
          echo "üìã Files modified during version bump:"
          git status --porcelain
          
          # Add all version-related changes
          git add manifest.json
          [ -f package.json ] && git add package.json || echo "No package.json to commit"
          [ -f README.md ] && git add README.md || echo "No README.md changes to commit"
          
          # Show what we're about to commit
          echo ""
          echo "üìù Changes to be committed:"
          git diff --cached --name-only
          
          # Commit with detailed message
          git commit -m "ci: bump version to $NEW_VERSION

          - Updated manifest.json version
          - Updated package.json version (if exists)  
          - Updated version references in documentation
          
          This commit was created automatically by GitHub Actions."
          
          git push origin main
          echo "‚úÖ Successfully committed and pushed version $NEW_VERSION"

      - name: Create GitHub prerelease
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ steps.bump.outputs.new_version }} (Prerelease)"
          tag_name: "v${{ steps.bump.outputs.new_version }}"
          prerelease: true
          draft: false
          generate_release_notes: true
          files: "pomoblock-${{ steps.bump.outputs.new_version }}.zip"
          body: |
            ## üöÄ PomoBlock v${{ steps.bump.outputs.new_version }} - Prerelease
            
            This is an automated prerelease build from the latest main branch.
            
            ### üìã Version Updates
            - ‚úÖ **manifest.json**: Updated to v${{ steps.bump.outputs.new_version }}
            - ‚úÖ **package.json**: Synchronized version (if exists)
            - ‚úÖ **Documentation**: Updated version references
            - ‚úÖ **Built extension**: Compiled with correct version
            
            ### üì¶ Installation
            1. Download the `pomoblock-${{ steps.bump.outputs.new_version }}.zip` file below
            2. Extract the contents to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (toggle in top right)
            5. Click "Load unpacked" and select the extracted folder
            
            ### üß™ Testing
            This is a prerelease version for testing. Please report any issues in the repository.
            
            ### üîç What's Included
            - Compiled TypeScript ‚Üí JavaScript
            - All extension assets and icons
            - Proper Chrome extension structure
            - Version ${{ steps.bump.outputs.new_version }} in manifest
            
            **Built from commit**: ${{ github.sha }}
            **Build time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.new_version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "üéâ Successfully created prerelease v$NEW_VERSION"
          echo ""
          echo "üìã Version Update Summary:"
          echo "  ‚Ä¢ manifest.json: $(cat manifest.json | jq -r '.version')"
          [ -f package.json ] && echo "  ‚Ä¢ package.json: $(cat package.json | jq -r '.version')" || echo "  ‚Ä¢ package.json: (not found)"
          echo "  ‚Ä¢ Built extension: $(cat dist/manifest.json | jq -r '.version')"
          echo ""
          echo "üì¶ Package: pomoblock-$NEW_VERSION.zip"
          echo "üîó Release URL: ${{ steps.create_release.outputs.url }}"
          echo ""
          echo "‚úÖ All version numbers are now synchronized!"